import { addStart, addSuccess, addFailed, resetAddState } from '@/redux/itemSlice.jsx';
import axios from 'axios';
import { toast } from 'react-hot-toast';

const API_URL = import.meta.env.VITE_API_URL_V1 || import.meta.env.VITE_API_URL_V2;

// C·∫•u h√¨nh header m·∫∑c ƒë·ªãnh
const defaultHeaders = {
  Accept: 'application/json',
  'Content-Type': 'application/json',
};

// C·∫•u h√¨nh header cho form-data
const formDataHeaders = (accessToken) => ({
  token: `Bearer ${accessToken}`,
  'Content-Type': 'multipart/form-data',
});

// C·∫•u h√¨nh header cho y√™u c·∫ßu c√≥ token
const authHeaders = (accessToken) => ({
  token: `Bearer ${accessToken}`,
  ...defaultHeaders,
});

// NOTE: L·∫•y danh s√°ch s·∫£n ph·∫©m
export const getProductsAll = async () => {
  try {
    const response = await axios.get(`${API_URL}/products`, {
      timeout: 10000,
      headers: defaultHeaders,
    });

    return response.data;
  } catch (error) {
    const errorMessage = error.response?.data?.message || 'L·ªói h·ªá th·ªëng!';
    toast.error(errorMessage, { duration: 2000 });
    throw new Error(errorMessage);
  }
};
// NOTE: L·∫•y s·∫£n ph·∫©m theo ID
export const getProduct = async (id) => {
  if (!id) throw new Error('ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!');

  try {
    console.log(`üîç Fetching category with ID: ${id} from: ${API_URL}/products/${id}`);
    const response = await axios.get(`${API_URL}/products/${id}`, {
      timeout: 10000,
      headers: defaultHeaders,
    });

    return response.data;
  } catch (error) {
    console.error('‚ùå Error fetching category:', error);
    console.error('Error details:', error.response?.data || error.message);

    const errorMessage = error.response?.data?.message || 'L·ªói h·ªá th·ªëng!';
    toast.error(errorMessage, { duration: 2000 });
    throw new Error(errorMessage);
  }
};

// NOTE: Th√™m s·∫£n ph·∫©m m·ªõi
export const addProducts = async (formData, dispatch, accessToken, axiosJWT) => {
  if (!formData || !accessToken || !axiosJWT) {
    toast.error('D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá!', { duration: 2000 });
    throw new Error('D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá!');
  }

  return toast.promise(
    async () => {
      dispatch(addStart());
      const res = await axiosJWT.post(`${API_URL}/products/create`, formData, {
        headers: formDataHeaders(accessToken),
      });
      dispatch(addSuccess(res.data));
      dispatch(resetAddState());
      return res.data;
    },
    {
      loading: 'ƒêang th√™m s·∫£n ph·∫©m...',
      success: <b>Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!</b>,
      error: (error) => {
        const errorMessage = error.response?.data?.message || 'L·ªói h·ªá th·ªëng!';
        dispatch(addFailed(errorMessage));
        return <b>{errorMessage}</b>;
      },
    },
    {
      success: { duration: 2000 }, // T√πy ch·ªânh th·ªùi gian hi·ªÉn th·ªã cho success
      error: { duration: 2000 }, // T√πy ch·ªânh th·ªùi gian hi·ªÉn th·ªã cho error
    },
  );
};

// NOTE: C·∫≠p nh·∫≠t s·∫£n ph·∫©m
export const editProduct = async (id, formData, accessToken, axiosJWT) => {
  if (!id || !formData || !accessToken || !axiosJWT) {
    toast.error('D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá!', { duration: 2000 });
    throw new Error('D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá!');
  }

  return toast.promise(
    axiosJWT.patch(`${API_URL}/products/update/${id}`, formData, {
      headers: formDataHeaders(accessToken),
    }),
    {
      loading: 'ƒêang c·∫≠p nh·∫≠t s·∫£n ph·∫©m...',
      success: <b>C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!</b>,
      error: (error) => {
        const errorMessage = error.response?.data?.message || 'L·ªói h·ªá th·ªëng!';
        return <b>{errorMessage}</b>;
      },
    },
    {
      duration: 1500, // Th·ªùi gian hi·ªÉn th·ªã cho success (t√πy ch·ªçn)
    },
  );
};

// NOTE: X√≥a s·∫£n ph·∫©m
export const deleteProduct = async (id, accessToken, axiosJWT) => {
  if (!id || !accessToken || !axiosJWT) {
    toast.error('D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá!', { duration: 2000 });
    throw new Error('D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá!');
  }
  return toast.promise(
    await axiosJWT.delete(`${API_URL}/products/delete/${id}`, {
      headers: authHeaders(accessToken),
    }),
    {
      loading: 'ƒêang x√≥a s·∫£n ph·∫©m...',
      success: <b>X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!</b>,
      error: (error) => {
        const errorMessage = error.response?.data?.message || 'L·ªói h·ªá th·ªëng!';
        return <b>{errorMessage}</b>;
      },
    },
    {
      duration: 1500, // Th·ªùi gian hi·ªÉn th·ªã cho success (t√πy ch·ªçn)
    },
  );
};
